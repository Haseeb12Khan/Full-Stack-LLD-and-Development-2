				QUESTION

Create a JavaScript function that uses closures to implement caching. 
The function should cache the results of complex calculations and return the cached result when the same inputs occur again.

Test Cases:
	1. Perform a calculation with a unique argument and verify caching.
	2. Repeat the calculation with the same argument and confirm the cached result is used.
	3. Verify with a different argument to ensure the function correctly computes and caches new results.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

index.html
---------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Counter Closure</title>
</head>

<body>
    <!-- No need to change HTML -->
    <script src="script.js"></script>
</body>

</html>



script.js
------------------------------------
function cachingFunction(complexCalculation) {
  // Modify this cache object and store data in the arg
  // also perform the complexCalculation on the arg
  window.cache = {};
  // Implement the closure-based caching mechanism here
  return function (arg) {
      if(window.cache[arg] !== undefined) {
          console.log('Fetching from cache for arg: ${arg}');
          return window.cache[arg];
      }
      console.log('Computing result for arg: ${arg}');
      const result = complexCalculation(arg);
      window.cache[arg] = result;
      return result;
  };
}
function complexCalculation(num) {
    let sum = 0;
    for(let i=0;i<1e6;i++) {
        sum += Math.sqrt(num+i);
    }
    return sum;
}
const memoizedFunction = cachingFunction(complexCalculation);
console.log(memoizedFunction(5));
console.log(memoizedFunction(5));
console.log(memoizedFunction(10));
console.log(memoizedFunction(10));