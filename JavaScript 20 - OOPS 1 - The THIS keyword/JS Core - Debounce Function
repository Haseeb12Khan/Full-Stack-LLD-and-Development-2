				QUESTION

Implement a Debounce Function in JavaScript

In this problem, you will solidify your understanding of debouncing by creating your own debounce function in JavaScript. 

After learning about debouncing, this hands-on challenge will help you apply the concept and develop a functional debounce utility.

Instructions:
--------------------------------------------
	1. You are provided with a partially completed function named debounce. Your task is to complete the implementation to create a working debounce utility.
	2. The debounce function should take two arguments: func (the function to be debounced) and wait (the time interval in milliseconds).
	3. Test your debounce function with various scenarios, including different debounce intervals and functions.

Important pointers:
--------------------------------------------
	1. Remember that debouncing is useful in scenarios where you want to delay the execution of a function until a certain amount of time has passed without additional calls.
	2. To test your implementation, create a test function that logs a message to the console. 
	3. Use your debounce function to debounce the test function and observe the behavior.

Function Signature and Test Case:
--------------------------------------------
function debounce(func, wait) {
}

// Test Cases
--------------------------------------------
const debouncedFunc = debounce((value) => console.log(value), 200);

debouncedFunc("First call"); // Should not log immediately
debouncedFunc("Second call"); // Should cancel the previous and set a new timeout
// Wait for 200 ms
// Should log "Second call" after 200 ms


Test Cases:
	-> Checking in backend if the debounce function is working or not.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Items Buy</title>
</head>
<body>
    <p></p>
    <script id="solution">
        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func(...args),wait);
            };
        }

        const debouncedFunc = debounce((value) => console.log(value),200);

        debouncedFunc("First call");
        setTimeout(() => debouncedFunc("Second call"),100);

        const testDebounce = debounce(() => console.log("Debounce triggered!"),300);
        testDebounce();
        setTimeout(testDebounce,100);
        setTimeout(testDebounce,200);
        setTimeout(testDebounce,400);
    </script>
</body>
</html>
